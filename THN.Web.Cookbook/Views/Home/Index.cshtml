@{
    ViewBag.Title = "Home Page";
}

<div class="jumbotron">
    <h1>Steve Trofemuk</h1>
    <p class="lead">Senior Application Developer</p>
    <p>
        This project contains a simple recipe application with all the necessary CRUD functions.
        In each of the menu items above, you should be able to see a list of recipes that you can
        search through.  Clicking the "edit" link should take you to a form that allows you to edit
        the recipe and add notse.  Clicking the "print" link should present the recipe in a printer 
        friendly manner.  Although all of the applications are similar, they are all implemnented in
        entirely different ways.  
    </p>
    <p>This is the application I use to investigate newer technologies.</p>
    <p><a href="https://www.linkedin.com/in/trofemuk/" class="btn btn-primary btn-lg">LinkedIn &raquo;</a></p>
</div>
<div class="col-md-4">
    <h2>Project Details</h2>
    <p>
        <ul>
            <li>
                The application uses Entity Framework on the backend with data migrations enabled.
                The database should create itself when the application is run for the first time.
                You may need to run "update-database" to get the seed data to populate.
            </li>
            <li>
                This application uses a "code first" approach with optomistic locking.  Lock
                messages are displayed as error messages that allows the user to reload the recipe
                or abandon all changes.
            </li>
            <li>The AngularJs service calls to the Web API are asynchronus using promises.</li>
            <li>The MS Unit Test are for the controllers only.</li>
            <li>The AngularJS controllers are tested using Jasmine and Karma.</li>
            <li>
                The JavaScript version (Cookbook JS SPA) is written with a "one controller to rule them
                all" approach.
            </li>
            <li>
                The TypeScript version (Cookbook TS SPA) is written with client side routing where AngularJS
                handles the views. There is a special route added to the route config to enable the client
                routing to function.
            </li>
            <li>
                This is the project I use to test new ideas and new technologies.  As such it is constantly in
                flux.  If something doesn't work it's because I'm trying new things.
            </li>
        </ul>

    </p>
</div>
<div class="col-md-4">
    <h2>Change Log</h2>
    <p>
        <ul>
            <li>I am currently rewriting the SPA to use Angular 4.</li>
            <li>Using TypeScript, I rebuild the AngularJs SPA using client side routing, validations, data caching, and better error hanlding.</li>
            <li>Added JSamine and Karma code for unit testing the Javascript.</li>
            <li>Build AngularJs SPA using bootstrap and Web API.</li>
            <li>Added bootstrap to the project.</li>
            <li>Built Android app that consumed the Web API service.</li>
            <li>Expanded project to include Web API.</li>
            <li>Added unit testing.</li>
            <li>Created project initially to understand Entity Framework and MVC.  Of particular interest was
                the "code first" approach.</li>
        </ul>
    </p>
</div>
